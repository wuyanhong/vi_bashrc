snippet     if
abbr        if () {}
    if (${1:#:condition}) {
    }

snippet else
    else {
        ${0:TARGET}
    }

snippet elseif
    else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     ifelse
abbr        if () {} else {}
    if (${1:#:condition}) {
        ${2:TARGET}
    } else {
        ${3}
    }

snippet     debugu
abbr        set debug log
    /* gyl add for debug */
    #define LOG_LEVEL LOG_LEVEL_I
    #define MODULE_TAG "[wuyh]"

    #define LOG_LEVEL_E 3
    #define LOG_LEVEL_N 5
    #define LOG_LEVEL_I 6
    #define LOG_LEVEL_D 7

    #if (LOG_LEVEL >= LOG_LEVEL_E)
    #define PERR(fmt, args...) printf("[ERROR]" MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PERR(fmt, args...)
    #endif

    #if (LOG_LEVEL >= LOG_LEVEL_N)
    #define PNOTICE(fmt, args...) printf("[NOTICE]" MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PNOTICE(fmt, args...)
    #endif

    #if (LOG_LEVEL >= LOG_LEVEL_I)
    #define PINFO(fmt, args...) printf("[INFO]" MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PINFO(fmt, args...)
    #endif

    #if (LOG_LEVEL >= LOG_LEVEL_D)
    #define PDEBUG(fmt, args...) printf("[DEBUG]" MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PDEBUG(fmt, args...)
    #endif
    /* gyl add debug define end */

snippet     debugk
abbr        debug difine
    /* gyl add for debug */
    #define LOG_LEVEL LOG_LEVEL_I
    #define MODULE_TAG "[wuyh]"

    #define LOG_LEVEL_E 3
    #define LOG_LEVEL_N 5
    #define LOG_LEVEL_I 6
    #define LOG_LEVEL_D 7

    #if (LOG_LEVEL >= LOG_LEVEL_E)
    #define PERR(fmt, args...) printk(KERN_ERR "[ERROR]" MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PERR(fmt, args...)
    #endif

    #if (LOG_LEVEL >= LOG_LEVEL_N)
    #define PNOTICE(fmt, args...) printk(KERN_NOTICE "[NOTICE]"  MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PNOTICE(fmt, args...)
    #endif

    #if (LOG_LEVEL >= LOG_LEVEL_I)
    #define PINFO(fmt, args...) printk(KERN_INFO "[INFO]"  MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PINFO(fmt, args...)
    #endif

    #if (LOG_LEVEL >= LOG_LEVEL_D)
    #define PDEBUG(fmt, args...) printk(KERN_DEBUG "[DEBUG]"  MODULE_TAG "<%s><%d>:" fmt "\n",\
            __func__, __LINE__, ##args)
    #else
    #define PDEBUG(fmt, args...)
    #endif
    /* gyl add debug define end */

snippet debuge
abbr    PERR("");
    PERR("${1}");

snippet debugn
abbr    PNOTICE("");
    PNOTICE("${1}");

snippet debugd
abbr    PDEBUG("");
    PDEBUG("${1}");

snippet debugi
abbr    PINFO("");
    PINFO("${1}");

snippet     for
abbr        for () {}
    for (${1} = 0; $1 < ${2}; $1++) {
        ${0:TARGET}
    }

snippet     while
abbr        while () {}
    while (${1:#:condition}) {
    }

snippet     do_while
alias       do
    do {
        ${0:TARGET:code}
    } while (${1:#:condition});

snippet     switch
abbr        switch () {}
    switch (${1:#:var}) {
        case ${2:#:val}:
            ${0:TARGET}
            break;
    }

snippet     function
alias       func
abbr        func() {}
    ${1:void} ${2:#:func_name}(${3:#:args}) {
        ${0:TARGET}
    }

snippet     struct
abbr        struct {}
    struct ${1:#:name} {
        ${0:TARGET:data}
    };

# Typedef struct
snippet struct_typedef
alias   type_struct
    typedef struct {
        ${0:TARGET:data}
    }${1:#:name};

snippet     enum
abbr        enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet main
alias   int_m
	int main(int argc, char const* argv[])
	{
		${0:TARGET}
		return 0;
	}

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:stdio}.h>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}.h"${0}

snippet vol
alias   volatile
    volatile

snippet ifdef
alias   #ifdef
abbr #ifdef ... #else ... #endif
    #ifdef ${1:TARGET}
        ${2:TARGET}
    #else
        ${0:TARGET}
    #endif

snippet ifndef
alias   #ifndef
abbr #ifndef ... #define ... #endif
    #ifndef $1
    #define ${1:#:SYMBOL}
    #endif${0}

snippet def
alias   #def, #define
    #define

# Include-Guard
snippet once
abbr include-guard
    #ifndef ${1:SYMBOL}
        #define $1

        ${0:TARGET}
    #endif /* end of include guard */

# Ternary conditional operator
snippet conditional
    (${1:#:condition}) ? ${2:#:a} : ${3:#:b}

snippet typedef
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet printf
abbr    printf("...\n", ...);
    printf("${1}%s\n",__func__);

snippet printk
abbr    printk("...\n", ...);
    printk("${1}%s\n",__func__);

snippet fprintf
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n");

snippet kerr
abbr    pr_err("[wuyh] %s\n",__func__);
    pr_err("[wuyh] %s:${1}\n",__func__);

snippet kinfo
abbr    pr_info("[wuyh] %s\n",__func__);
    pr_info("[wuyh] %s:${1}\n",__func__);

snippet comment
alias /*   */
    /* ${1:#:comment} */

snippet sizeof
alias size
    sizeof(${0:TARGET})

snippet hello
    #include <stdio.h>
    int main(int argc, char const* argv[])
    {
        puts("hello, world!");
        return 0;
    }

snippet fopen
abbr fopen("...", "...");
    fopen("${1:PATH}", "${2:MODE}");
    ${0:TARGET}
    fclose(${3:FD});

snippet fgets
abbr fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:FILE});
